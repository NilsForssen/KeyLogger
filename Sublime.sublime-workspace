{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Not",
				"NotImplementedError\tclass"
			],
			[
				"as",
				"ascii_uppercase\tstatement"
			],
			[
				"addTo",
				"addToBlackList"
			],
			[
				"file",
				"file\tstatement"
			],
			[
				"write",
				"writeDatFile"
			],
			[
				"save",
				"saveNewFile"
			],
			[
				"y",
				"yTicksDefault\tstatement"
			],
			[
				"de",
				"defaultTicks\tstatement"
			],
			[
				"time",
				"timePerCat\tstatement"
			],
			[
				"timePer",
				"timePerCatList\tstatement"
			],
			[
				"key",
				"keyDict\tstatement"
			],
			[
				"bo",
				"BOTH\tstatement"
			],
			[
				"keyLog",
				"keyLogToggle"
			],
			[
				"Keyboard",
				"KeyboardLogger\tclass"
			],
			[
				"keyboard",
				"KeyboardLogger\tclass"
			],
			[
				"keybo",
				"KeyboardLogger\tclass"
			],
			[
				"stop",
				"stopLog\tstatement"
			],
			[
				"keyb",
				"keyboardLogger\tclass"
			]
		]
	},
	"buffers":
	[
		{
			"file": ".gitignore",
			"settings":
			{
				"buffer_size": 1724,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import tkinter as tk\nfrom Utilities import BGLogger, Graph\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\nimport os\n\nclass GraphPage(tk.Frame):\n\n    def __init__(self, master, controller):\n\n        tk.Frame.__init__(self, master)\n\n        self.controller = controller\n        self.Logger = BGLogger.KeyboardLogger()\n        self.Grapher = Graph.BarGraph()\n\n        self.createWidgets()\n\n    def setLists(self):\n        \"\"\"\n        Set black and white-list of keyboardlogger\n        \"\"\"\n\n        # Set blackList, if empty, set instead whiteList\n        blackList, whiteList = self.controller.readSettings(\"blackList\", \"whiteList\").values()\n        if blackList:\n            self.Logger.setBlackList(blackList)\n        elif whiteList:\n            self.Logger.setWhiteList(whiteList)\n\n\n    def createWidgets(self):\n\n        self.setLists()\n\n        self.rowconfigure((0,1,2), weight=1)\n        self.columnconfigure(1, weight=1)\n\n        def saveImg():\n\n            fTypes, dpi = self.controller.readSettings(\"imageFormats\", \"imageDPI\").values()\n\n\n            \"\"\"\n            I know the following line isnt very practical\n            but hey, who doesn't like a one-liner\n            \"\"\"\n            fileTypeList = tuple(map(lambda f, t : tuple((s+t) for s in f), [(\"\", \"*.\")]*len(fTypes), fTypes))\n\n            location = tk.filedialog.asksaveasfilename(\n                initialdir=self.controller.destinationDir,\n                title=\"save image\",\n                defaultextension=\"png\",\n                filetypes=fileTypeList)\n\n            name, ext = os.path.splitext(location)\n            if location:\n                self.Grapher.saveImg(location, format=ext.replace(\".\", \"\"), dpi=dpi)\n\n\n        self.keyLogButton = tk.Button(self,\n            text=\"Start logging\", \n            background=\"green2\",\n            activebackground=\"green2\",\n            command=lambda : self.setToggleState(self.Logger.toggle()))\n        self.graphButton = tk.Button(self,\n            text=\"Update Graph\",\n            background=\"yellow2\",\n            activebackground=\"yellow2\",\n            command=self.plotData)\n        self.saveImgButton = tk.Button(self,\n            text=\"Save Image\",\n            background=\"royalblue1\",\n            activebackground=\"royalblue1\",  \n            command=saveImg)\n\n        self.graphCanvas = FigureCanvasTkAgg(self.Grapher.figSetup(\n            title=\"Letter Frequency\",\n            xlabel=\"Character\",\n            ylabel=\"Percentage (%)\",\n            size=(10, 6)), master= self)\n        \n\n        self.keyLogButton.grid(row=0, column=0, sticky=\"NSEW\")\n        self.graphButton.grid(row=1, column=0 ,sticky=\"NSEW\")\n        self.saveImgButton.grid(row=2, column=0, sticky=\"NSEW\")\n\n        self.graphCanvas.get_tk_widget().grid(\n           row=0, rowspan=3, column=1, sticky=\"NSEW\")\n\n\n    def setToggleState(self, default=None):\n\n        toggleBool = default or self.Logger.logging\n\n        if toggleBool:\n\n            self.keyLogButton.config(\n                text=\"Stop logging\",\n                relief=\"raised\",\n                background=\"red2\",\n                activebackground=\"red2\")\n\n            self.after(100, self.setToggleState)\n        else:\n\n            self.setLists()\n\n            self.keyLogButton.config(\n                text=\"Start logging\",\n                relief=\"raised\",\n                background=\"green2\",\n                activebackground=\"green2\")\n\n\n    def plotData(self, event=None):\n\n        self.Grapher.loadData(self.Logger.keyDict, mode=\"percent\")\n        self.Grapher.plotData()\n        self.graphCanvas.draw()\n\n\n    def menuBar(self, root):\n\n        def newLOG():\n\n            self.Logger.flush()\n            self.plotData()\n\n        def readLOGFile(self, path):\n\n            try:\n                with open(path, mode=\"r\") as file:\n                    newDict = {}\n                    for line in file.readlines():\n                        line = line.replace(\"'\", \"\")\n                        key, value = line.split(\":\")\n                        newDict[key.strip()] = int(value.strip())\n                    return newDict\n\n            except IOError:\n                print(\"{} not found\".format(path))\n\n\n        def writeLOGFile(self, path, dataDict):\n\n            try:\n                with open(path, mode=\"w\") as file:\n                    for key in dataDict:\n                        file.write(\"{}:{}\\n\".format(key, dataDict[key]))\n\n            except:\n                print(\"Unable to open file\")\n\n\n        def loadLOGFile(self, replace=True):\n\n            if self.Logger.logging:\n                self.Logger.keyLogToggle()\n\n            filePath = tk.filedialog.askopenfilename(\n                initialdir=self.controller.destinationDir,\n                title=\"Select file\",\n                filetypes=((\"log files\", \"*.LOG\"),))\n\n            self.Logger.keyDict = self.readLOGFile(filePath)\n\n\n        def saveNewLOGFile(self):\n\n            if self.Logger.logging:\n                self.keyLogToggle()\n\n            filePath = tk.filedialog.asksaveasfilename(\n                initialdir=self.controller.destinationDir,\n                defaultextension=\".dat\",\n                title=\"Create file\",\n                filetypes=((\"log file\", \"*.LOG\"),))\n\n            self.writeLOGFile(filePath, self.Logger.keyDict)\n\n\n        def saveToLOGFile(self):\n\n            if self.Logger.logging:\n                self.keyLogToggle()\n\n            filePath = tk.filedialog.askopenfilename(\n                initialdir=self.controller.destinationDir, \n                title=\"Select file\", \n                filetypes=((\"log file\", \"*.LOG\"),))\n\n            oldData = self.readLOGFile(filePath)\n            newData = self.Logger.keyDict\n\n            for key in oldData:\n                if key in newData:\n                    newData[key] += oldData[key]\n                else:\n                    newData[key] = oldData[key]\n\n            self.writeLOGFile(filePath, self.Logger.keyDict)\n\n        menu = tk.Menu(root)\n\n        filemenu = tk.Menu(menu, tearoff=0)\n        filemenu.add_command(label=\"New Log\", command=newLOG)\n        filemenu.add_command(label=\"Open Log\", command=loadLOGFile)\n        filemenu.add_command(label=\"Save As\", command=saveNewLOGFile)\n        filemenu.add_command(label=\"Save To\", command=saveToLOGFile)\n\n        filemenu.add_separator()\n        filemenu.add_command(label=\"Exit\", command=self.controller.destroy)\n        menu.add_cascade(label=\"File\", menu=filemenu)\n\n        helpmenu = tk.Menu(menu, tearoff=0)\n        helpmenu.add_command(label=\"About\")\n        menu.add_cascade(label=\"Help\", menu=helpmenu)\n\n        menu.add_command(label=\"Settings\",\n            command=lambda : self.controller.showFrame(\"SettingsPage\"))\n        menu.add_command(label=\"Exit\", \n            command=self.controller.destroy)\n\n        return menu\n",
			"file": "Application/Pages/GraphPage.py",
			"file_size": 7034,
			"file_write_time": 132319775872317926,
			"settings":
			{
				"buffer_size": 6810,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"package in",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"sublime",
				"SublimeREPL: Python"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"pac",
				"Package Control: Install Package"
			],
			[
				"package ",
				"Package Control: Install Package"
			],
			[
				"th",
				"UI: Select Theme"
			],
			[
				"package control in",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 157.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/forss/Documents/Python/KeyLogger"
	],
	"file_history":
	[
		"/C/Users/forss/Documents/Python/KeyLogger/test.py",
		"/C/Users/forss/Documents/Python/KeyLogger/KeyLogger/.git/MERGE_MSG",
		"/C/Users/forss/Documents/Python/Logger/.git/MERGE_MSG",
		"/C/Users/forss/Documents/Python/Logger/test1.py",
		"/C/Users/forss/Documents/Python/Logger/.gitignore",
		"/C/Users/forss/Documents/Python/Logger/test 2.py",
		"/C/Users/forss/Documents/Python/AI  Harvard/Lecture 0/src0/maze.py",
		"/C/Users/forss/Documents/Python/Logger/Utilities/Graph.py",
		"/C/Users/forss/Documents/Python/Logger/Utilities/BGLogger.py",
		"/C/Users/forss/Documents/Python/Logger/defaultConfig.json",
		"/C/Users/forss/Documents/Python/Logger/Pages/GraphPage.py",
		"/C/Users/forss/Documents/Python/Logger/Pages/SettingsPage.py",
		"/C/Users/forss/Documents/Python/Logger/config.json",
		"/C/Users/forss/Documents/Python/Logger/Root.py",
		"/C/Users/forss/Documents/Python/Logger/Application/Utilities/BGLogger.py",
		"/C/Users/forss/Documents/Python/Logger/Application/Utilities/Graph.py",
		"/C/Users/forss/Documents/Python/Logger/Application/Root.py",
		"/C/Users/forss/Documents/Python/Logger/Application/defaultConfig.json",
		"/C/Users/forss/Documents/Python/Logger/Application/config.json",
		"/C/Users/forss/Documents/Python/Logger/Application/Pages/GraphPage.py",
		"/C/Users/forss/Documents/Python/Logger/Application/Pages/SettingsPage.py",
		"/C/Users/forss/Documents/Python/Logger/Application/sdfgsdfg.pdf",
		"/C/Users/forss/Documents/Python/Logger/Application/config backup.json",
		"/C/Users/forss/Documents/Python/Logger/test.py",
		"/C/Users/forss/Documents/Python/Logger/Graph.py",
		"/C/Users/forss/Documents/Python/Logger/Application.py",
		"/C/Users/forss/Documents/Python/Logger/application_config.json",
		"/C/Users/forss/Documents/Python/Logger/BGLogger.py",
		"/C/Users/forss/AppData/Local/Programs/Python/Python37-32/lib/tkinter/__init__.py",
		"/C/Users/forss/Documents/Command Scripts/audio_tag_editor.py",
		"/C/Users/forss/Documents/Python/Olympiad.py",
		"/C/Users/forss/Documents/Python/Logger/Test 1.dat",
		"/C/Users/forss/Documents/Python/hje.txt",
		"/C/Users/forss/Documents/Python/test_2.py",
		"/C/Users/forss/Documents/Python/hej.espace",
		"/C/Users/forss/Documents/Python/Logger/Class Caller Test.py",
		"/C/Users/forss/AppData/Roaming/Sublime Text 3/Packages/User/python3.sublime-build",
		"/C/Users/forss/AppData/Local/Programs/Python/Python37-32/lib/site-packages/matplotlib/pyplot.py",
		"/C/Users/forss/AppData/Roaming/Sublime Text 3/Packages/User/newPython3.75Build.sublime_build.sublime-build",
		"/C/Users/forss/Documents/Python/test.py",
		"/C/Users/forss/Documents/Python/BGLogger.py",
		"/C/Users/forss/Documents/Python/cmd_file_organizer.py",
		"/C/Users/forss/Documents/BreadProject/SerialLogger_Pi 1.2/serialLogger_Pi 1.2.1.py",
		"/D/sorting.py",
		"/C/Users/forss/Documents/BreadProject/SerialLogger_Pi 1.2/file_organizer",
		"/C/Users/forss/Documents/Python/Game.py",
		"/C/Users/forss/Documents/BreadProject/SerialLogger_Win 1.2/serialLogger_Win 1.2.1.py",
		"/C/Users/forss/Documents/BreadProject/SerialLogger_Win 1.2/logs/uniqueMACLog_2019-10-01T17.07.31.bin",
		"/C/Users/forss/Documents/BreadProject/SerialLogger_Win 1.2/serialLogger_Win 1.2.py",
		"/C/Users/forss/Documents/BreadProject/SerialLogger/test.py",
		"/C/Users/forss/Documents/BreadProject/PythonScripts/blackList.txt",
		"/C/Users/forss/Documents/BreadProject/PythonScripts/test.py",
		"/C/Users/forss/Documents/BreadProject/PythonScripts/serialLogger.py",
		"/C/Users/forss/Documents/BreadProject/PythonScripts/blackList.bin",
		"/C/Users/forss/Documents/BreadProject/PythonScripts/uniqueMACLog_2019-09-20T19.51.30.bin",
		"/C/Users/forss/Documents/BreadProject/PythonScripts/uniqueMACLog_2019-09-20T19.23.30.bin",
		"/C/Users/forss/Documents/BreadProject/PythonScripts/uniqueMACLog_2019-09-20T19.17.37.bin",
		"/C/Users/forss/Documents/BreadProject/PythonScripts/uniqueMACLog_2019-09-20T19.16.05.bin",
		"/C/Users/forss/AppData/Roaming/Sublime Text 3/Packages/Default/Default (Windows).sublime-keymap",
		"/C/Users/forss/Documents/BreadProject/PythonScripts/uniqueMACLog_2019-09-19T19.38.34.bin",
		"/C/Users/forss/Documents/BreadProject/PythonScripts/uniqueMACLog_2019-09-19T19.29.53.bin",
		"/C/Users/forss/Documents/BreadProject/PythonScripts/uniqueMACLog_2019-09-19T19.11.31.bin",
		"/C/Users/forss/Documents/BreadProject/PythonScripts/uniqueMACLog_2019-09-19T19.06.39.bin",
		"/C/Users/forss/Documents/BreadProject/PythonScripts/uniqueMACLog_2019-09-19T18.46.32.bin",
		"/C/Users/forss/Documents/BreadProject/PythonScripts/serial_logger.py",
		"/C/Users/forss/Documents/Bröd-Projekt/PythonScripts/serial_logger.py",
		"/C/Users/forss/Documents/nils",
		"/C/Users/forss/Documents/hejha.py",
		"/C/Users/forss/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/C/Users/forss/Documents/test.py",
		"/C/Users/forss/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings"
	],
	"find":
	{
		"height": 25.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": ".gitignore",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1724,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Git Formats/Git Ignore.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 1,
					"file": "Application/Pages/GraphPage.py",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 6810,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 37.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				2
			],
			[
				1,
				0,
				2,
				1
			],
			[
				1,
				1,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.713411078717,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/User/python3.sublime-build",
	"project": "Sublime.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 205.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
